/*
 * Copyright 2020 Bitnine Co., Ltd.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
--
-- AGTYPE data type regression tests
--
--
-- Load extension and set path
--
LOAD 'agensgraph';
SET search_path TO ag_catalog;
--
-- Create a table using the AGTYPE type
--
CREATE TABLE agtype_table (type text, agtype agtype);
--
-- Insert values to exercise agtype_in/agtype_out
--
INSERT INTO agtype_table VALUES ('bool', 'true');
INSERT INTO agtype_table VALUES ('bool', 'false');
INSERT INTO agtype_table VALUES ('null', 'null');
INSERT INTO agtype_table VALUES ('string', '""');
INSERT INTO agtype_table VALUES ('string', '"This is a string"');
INSERT INTO agtype_table VALUES ('integer', '0');
INSERT INTO agtype_table VALUES ('integer', '9223372036854775807');
INSERT INTO agtype_table VALUES ('integer', '-9223372036854775808');
INSERT INTO agtype_table VALUES ('float', '0.0');
INSERT INTO agtype_table VALUES ('float', '1.0');
INSERT INTO agtype_table VALUES ('float', '-1.0');
INSERT INTO agtype_table VALUES ('float', '100000000.000001');
INSERT INTO agtype_table VALUES ('float', '-100000000.000001');
INSERT INTO agtype_table VALUES ('float', '0.00000000000000012345');
INSERT INTO agtype_table VALUES ('float', '-0.00000000000000012345');
INSERT INTO agtype_table VALUES ('integer array',
	'[-9223372036854775808, -1, 0, 1, 9223372036854775807]');
INSERT INTO agtype_table VALUES('float array',
	'[-0.00000000000000012345, -100000000.000001, -1.0, 0.0, 1.0, 100000000.000001, 0.00000000000000012345]');
INSERT INTO agtype_table VALUES('mixed array', '[true, false, null, "string", 1, 1.0, {"bool":true}]');
INSERT INTO agtype_table VALUES('object', '{"bool":true, "null":null, "string":"string", "integer":1, "float":1.2, "arrayi":[-1,0,1], "arrayf":[-1.0, 0.0, 1.0], "object":{"bool":true, "null":null, "string":"string", "int":1, "float":8.0}}');
--
-- Special float values: NaN, +/- Infinity
--
INSERT INTO agtype_table VALUES ('float  nan', 'nan');
INSERT INTO agtype_table VALUES ('float  Infinity', 'Infinity');
INSERT INTO agtype_table VALUES ('float -Infinity', '-Infinity');
INSERT INTO agtype_table VALUES ('float  inf', 'inf');
INSERT INTO agtype_table VALUES ('float -inf', '-inf');
SELECT * FROM agtype_table;
      type       |                                                                                                       agtype                                                                                                       
-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 bool            | true
 bool            | false
 null            | null
 string          | ""
 string          | "This is a string"
 integer         | 0
 integer         | 9223372036854775807
 integer         | -9223372036854775808
 float           | 0.0
 float           | 1.0
 float           | -1.0
 float           | 100000000.000001
 float           | -100000000.000001
 float           | 1.2345e-16
 float           | -1.2345e-16
 integer array   | [-9223372036854775808, -1, 0, 1, 9223372036854775807]
 float array     | [-1.2345e-16, -100000000.000001, -1.0, 0.0, 1.0, 100000000.000001, 1.2345e-16]
 mixed array     | [true, false, null, "string", 1, 1.0, {"bool": true}]
 object          | {"bool": true, "null": null, "float": 1.2, "arrayf": [-1.0, 0.0, 1.0], "arrayi": [-1, 0, 1], "object": {"int": 1, "bool": true, "null": null, "float": 8.0, "string": "string"}, "string": "string", "integer": 1}
 float  nan      | NaN
 float  Infinity | Infinity
 float -Infinity | -Infinity
 float  inf      | Infinity
 float -inf      | -Infinity
(24 rows)

--
-- These should fail
--
INSERT INTO agtype_table VALUES ('bad integer', '9223372036854775808');
ERROR:  value "9223372036854775808" is out of range for type bigint
LINE 1: INSERT INTO agtype_table VALUES ('bad integer', '92233720368...
                                                        ^
INSERT INTO agtype_table VALUES ('bad integer', '-9223372036854775809');
ERROR:  value "-9223372036854775809" is out of range for type bigint
LINE 1: INSERT INTO agtype_table VALUES ('bad integer', '-9223372036...
                                                        ^
INSERT INTO agtype_table VALUES ('bad float', '-NaN');
ERROR:  invalid input syntax for type agtype
LINE 1: INSERT INTO agtype_table VALUES ('bad float', '-NaN');
                                                      ^
DETAIL:  Token "-NaN" is invalid.
CONTEXT:  agtype data, line 1: -NaN
INSERT INTO agtype_table VALUES ('bad float', 'Infi');
ERROR:  invalid input syntax for type agtype
LINE 1: INSERT INTO agtype_table VALUES ('bad float', 'Infi');
                                                      ^
DETAIL:  Token "Infi" is invalid.
CONTEXT:  agtype data, line 1: Infi
INSERT INTO agtype_table VALUES ('bad float', '-Infi');
ERROR:  invalid input syntax for type agtype
LINE 1: INSERT INTO agtype_table VALUES ('bad float', '-Infi');
                                                      ^
DETAIL:  Token "-Infi" is invalid.
CONTEXT:  agtype data, line 1: -Infi
--
-- Test agtype mathematical operator functions
-- +, -, unary -, *, /, %, and ^
--
SELECT agtype_add('1', '-1');
 agtype_add 
------------
 0
(1 row)

SELECT agtype_add('1', '-1.0');
 agtype_add 
------------
 0.0
(1 row)

SELECT agtype_add('1.0', '-1');
 agtype_add 
------------
 0.0
(1 row)

SELECT agtype_add('1.0', '-1.0');
 agtype_add 
------------
 0.0
(1 row)

SELECT agtype_sub('-1', '-1');
 agtype_sub 
------------
 0
(1 row)

SELECT agtype_sub('-1', '-1.0');
 agtype_sub 
------------
 0.0
(1 row)

SELECT agtype_sub('-1.0', '-1');
 agtype_sub 
------------
 0.0
(1 row)

SELECT agtype_sub('-1.0', '-1.0');
 agtype_sub 
------------
 0.0
(1 row)

SELECT agtype_neg('-1');
 agtype_neg 
------------
 1
(1 row)

SELECT agtype_neg('-1.0');
 agtype_neg 
------------
 1.0
(1 row)

SELECT agtype_neg('0');
 agtype_neg 
------------
 0
(1 row)

SELECT agtype_neg('0.0');
 agtype_neg 
------------
 -0.0
(1 row)

SELECT agtype_mul('-2', '3');
 agtype_mul 
------------
 -6
(1 row)

SELECT agtype_mul('2', '-3.0');
 agtype_mul 
------------
 -6.0
(1 row)

SELECT agtype_mul('-2.0', '3');
 agtype_mul 
------------
 -6.0
(1 row)

SELECT agtype_mul('2.0', '-3.0');
 agtype_mul 
------------
 -6.0
(1 row)

SELECT agtype_div('-4', '3');
 agtype_div 
------------
 -1
(1 row)

SELECT agtype_div('4', '-3.0');
    agtype_div     
-------------------
 -1.33333333333333
(1 row)

SELECT agtype_div('-4.0', '3');
    agtype_div     
-------------------
 -1.33333333333333
(1 row)

SELECT agtype_div('4.0', '-3.0');
    agtype_div     
-------------------
 -1.33333333333333
(1 row)

SELECT agtype_pow('-2', '3');
 agtype_pow 
------------
 -8.0
(1 row)

SELECT agtype_pow('2', '-1.0');
 agtype_pow 
------------
 0.5
(1 row)

SELECT agtype_pow('2.0', '3');
 agtype_pow 
------------
 8.0
(1 row)

SELECT agtype_pow('2.0', '-1.0');
 agtype_pow 
------------
 0.5
(1 row)

--
-- Should fail with divide by zero
--
SELECT agtype_div('1', '0');
ERROR:  division by zero
SELECT agtype_div('1', '0.0');
ERROR:  division by zero
SELECT agtype_div('1.0', '0');
ERROR:  division by zero
SELECT agtype_div('1.0', '0.0');
ERROR:  division by zero
--
-- Should get Infinity
--
SELECT agtype_pow('0', '-1');
 agtype_pow 
------------
 Infinity
(1 row)

SELECT agtype_pow('-0.0', '-1');
 agtype_pow 
------------
 -Infinity
(1 row)

--
-- Test operators +, -, unary -, *, /, %, and ^
--
SELECT '3.14'::agtype + '3.14'::agtype;
 ?column? 
----------
 6.28
(1 row)

SELECT '3.14'::agtype - '3.14'::agtype;
 ?column? 
----------
 0.0
(1 row)

SELECT -'3.14'::agtype;
 ?column? 
----------
 -3.14
(1 row)

SELECT '3.14'::agtype * '3.14'::agtype;
 ?column? 
----------
 9.8596
(1 row)

SELECT '3.14'::agtype / '3.14'::agtype;
 ?column? 
----------
 1.0
(1 row)

SELECT '3.14'::agtype % '3.14'::agtype;
 ?column? 
----------
 0.0
(1 row)

SELECT '3.14'::agtype ^ '2'::agtype;
 ?column? 
----------
 9.8596
(1 row)

--
-- Test orderability of comparison operators =, <>, <, >, <=, >=
-- These should all return true
-- Integer
SELECT agtype_in('1') = agtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') <> agtype_in('2');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') <> agtype_in('-2');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') < agtype_in('2');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') > agtype_in('-2');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') <= agtype_in('2');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') >= agtype_in('-2');
 ?column? 
----------
 t
(1 row)

-- Float
SELECT agtype_in('1.01') = agtype_in('1.01');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') <> agtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') <> agtype_in('1.011');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') < agtype_in('1.011');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') > agtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') <= agtype_in('1.011');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') >= agtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') < agtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.01') > agtype_in('-Infinity');
 ?column? 
----------
 t
(1 row)

-- NaN, under ordering, is considered to be the biggest numeric value
-- greater than positive infinity. So, greater than any other number.
SELECT agtype_in('1.01') < agtype_in('NaN');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('NaN') > agtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('NaN') > agtype_in('-Infinity');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('NaN') = agtype_in('NaN');
 ?column? 
----------
 t
(1 row)

-- Mixed Integer and Float
SELECT agtype_in('1') = agtype_in('1.0');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') <> agtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') <> agtype_in('0.999999');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') < agtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') > agtype_in('0.999999');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') <= agtype_in('1.001');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') >= agtype_in('0.999999');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') < agtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') > agtype_in('-Infinity');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1') < agtype_in('NaN');
 ?column? 
----------
 t
(1 row)

-- Mixed Float and Integer
SELECT agtype_in('1.0') = agtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.001') <> agtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('0.999999') <> agtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('1.001') > agtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('0.999999') < agtype_in('1');
 ?column? 
----------
 t
(1 row)

-- Strings
SELECT agtype_in('"a"') = agtype_in('"a"');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('"a"') <> agtype_in('"b"');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('"a"') < agtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('"b"') > agtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('"a"') <= agtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('"b"') >= agtype_in('"aa"');
 ?column? 
----------
 t
(1 row)

-- Lists
SELECT agtype_in('[0, 1, null, 2]') = agtype_in('[0, 1, null, 2]');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('[0, 1, null, 2]') <> agtype_in('[2, null, 1, 0]');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('[0, 1, null]') < agtype_in('[0, 1, null, 2]');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('[1, 1, null, 2]') > agtype_in('[0, 1, null, 2]');
 ?column? 
----------
 t
(1 row)

-- Objects (Maps)
SELECT agtype_in('{"bool":true, "null": null}') = agtype_in('{"null":null, "bool":true}');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('{"bool":true}') < agtype_in('{"bool":true, "null": null}');
 ?column? 
----------
 t
(1 row)

-- Comparisons between types
-- Object < List < String < Boolean < Integer = Float = Numeric < Null
SELECT agtype_in('1') < agtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('NaN') < agtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('Infinity') < agtype_in('null');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('true') < agtype_in('1');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('true') < agtype_in('NaN');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('true') < agtype_in('Infinity');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('"string"') < agtype_in('true');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('[1,3,5,7,9,11]') < agtype_in('"string"');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('{"bool":true, "integer":1}') < agtype_in('[1,3,5,7,9,11]');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('[1, "string"]') < agtype_in('[1, 1]');
 ?column? 
----------
 t
(1 row)

SELECT agtype_in('{"bool":true, "integer":1}') < agtype_in('{"bool":true, "integer":null}');
 ?column? 
----------
 t
(1 row)

--
-- Test agtype to boolean cast
--
SELECT agtype_to_bool(agtype_in('true'));
 agtype_to_bool 
----------------
 t
(1 row)

SELECT agtype_to_bool(agtype_in('false'));
 agtype_to_bool 
----------------
 f
(1 row)

-- These should all fail
SELECT agtype_to_bool(agtype_in('null'));
ERROR:  cannot cast agtype null to type boolean
SELECT agtype_to_bool(agtype_in('1'));
ERROR:  cannot cast agtype integer to type boolean
SELECT agtype_to_bool(agtype_in('1.0'));
ERROR:  cannot cast agtype float to type boolean
SELECT agtype_to_bool(agtype_in('"string"'));
ERROR:  cannot cast agtype string to type boolean
SELECT agtype_to_bool(agtype_in('[1,2,3]'));
ERROR:  cannot cast agtype array to type boolean
SELECT agtype_to_bool(agtype_in('{"bool":true}'));
ERROR:  cannot cast agtype object to type boolean
--
-- Test boolean to agtype cast
--
SELECT bool_to_agtype(true);
 bool_to_agtype 
----------------
 true
(1 row)

SELECT bool_to_agtype(false);
 bool_to_agtype 
----------------
 false
(1 row)

SELECT bool_to_agtype(null);
 bool_to_agtype 
----------------
 
(1 row)

SELECT bool_to_agtype(true) = bool_to_agtype(true);
 ?column? 
----------
 t
(1 row)

SELECT bool_to_agtype(true) <> bool_to_agtype(false);
 ?column? 
----------
 t
(1 row)

--
-- Map Literal
--
--Invalid Map Key (should fail)
SELECT agtype_build_map('[0]'::agtype, null);
ERROR:  key value must be scalar, not array, composite, or json
--
-- Test agtype object/array access operators object.property, object["property"], and array[element]
-- Note: At this point, object.property and object["property"] are equivalent.
--
SELECT agtype_access_operator('{"bool":true, "array":[1,3,{"bool":false, "int":3, "float":3.14},7], "float":3.14}','"array"','2', '"float"');
 agtype_access_operator 
------------------------
 3.14
(1 row)

-- empty map access
SELECT agtype_access_operator('{}', '"array"');
 agtype_access_operator 
------------------------
 
(1 row)

-- empty array access
SELECT agtype_access_operator('[]', '0');
 agtype_access_operator 
------------------------
 
(1 row)

-- out of bounds array access
SELECT agtype_access_operator('[0, 1]', '2');
 agtype_access_operator 
------------------------
 
(1 row)

SELECT agtype_access_operator('[0, 1]', '-3');
 agtype_access_operator 
------------------------
 
(1 row)

-- array AGTV_NULL element
SELECT agtype_access_operator('[1, 3, 5, 7]', 'null');
 agtype_access_operator 
------------------------
 
(1 row)

-- map AGTV_NULL key
SELECT agtype_access_operator('{"bool":false, "int":3, "float":3.14}', 'null');
 agtype_access_operator 
------------------------
 
(1 row)

-- invalid map key types
SELECT agtype_access_operator('{"bool":false, "int":3, "float":3.14}', 'true');
ERROR:  AGTV_BOOL is not a valid key type
SELECT agtype_access_operator('{"bool":false, "int":3, "float":3.14}', '2');
ERROR:  AGTV_INTEGER is not a valid key type
SELECT agtype_access_operator('{"bool":false, "int":3, "float":3.14}', '2.0');
ERROR:  AGTV_FLOAT is not a valid key type
--
-- Test STARTS WITH, ENDS WITH, and CONTAINS
--
SELECT agtype_string_match_starts_with('"abcdefghijklmnopqrstuvwxyz"', '"abcd"');
 agtype_string_match_starts_with 
---------------------------------
 true
(1 row)

SELECT agtype_string_match_ends_with('"abcdefghijklmnopqrstuvwxyz"', '"wxyz"');
 agtype_string_match_ends_with 
-------------------------------
 true
(1 row)

SELECT agtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"abcd"');
 agtype_string_match_contains 
------------------------------
 true
(1 row)

SELECT agtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"hijk"');
 agtype_string_match_contains 
------------------------------
 true
(1 row)

SELECT agtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"wxyz"');
 agtype_string_match_contains 
------------------------------
 true
(1 row)

-- should all fail
SELECT agtype_string_match_starts_with('"abcdefghijklmnopqrstuvwxyz"', '"bcde"');
 agtype_string_match_starts_with 
---------------------------------
 false
(1 row)

SELECT agtype_string_match_ends_with('"abcdefghijklmnopqrstuvwxyz"', '"vwxy"');
 agtype_string_match_ends_with 
-------------------------------
 false
(1 row)

SELECT agtype_string_match_contains('"abcdefghijklmnopqrstuvwxyz"', '"hijl"');
 agtype_string_match_contains 
------------------------------
 false
(1 row)

--
-- Cleanup
--
DROP TABLE agtype_table;
--
-- End of AGTYPE data type regression tests
--

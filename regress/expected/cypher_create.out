/*
 * Copyright 2020 Bitnine Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
LOAD 'agensgraph';
SET search_path TO ag_catalog;
SELECT create_graph('cypher_create');
NOTICE:  graph "cypher_create" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a agtype);
 a 
---
(0 rows)

-- vertex graphid
SELECT * FROM cypher('cypher_create', $$CREATE (:v)$$) AS (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$CREATE (:v {})$$) AS (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$CREATE (:v {key: 'value'})$$) AS (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$MATCH (n:v) RETURN n$$) AS (n agtype);
                                       n                                       
-------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "v", "properties": {}}::vertex
 {"id": 844424930131970, "label": "v", "properties": {}}::vertex
 {"id": 844424930131971, "label": "v", "properties": {"key": "value"}}::vertex
(3 rows)

-- Left relationship
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id:"right rel, initial node"})-[:e {id:"right rel"}]->(:v {id:"right rel, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- Right relationship
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id:"left rel, initial node"})<-[:e {id:"left rel"}]-(:v {id:"left rel, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- Pattern creates a path from the initial node to the last node
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "path, initial node"})-[:e {id: "path, edge one"}]->(:v {id:"path, middle node"})-[:e {id:"path, edge two"}]->(:v {id:"path, last node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- middle vertex points to the initial and last vertex
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "divergent, initial node"})<-[:e {id: "divergent, edge one"}]-(:v {id: "divergent middle node"})-[:e {id: "divergent, edge two"}]->(:v {id: "divergent, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- initial and last vertex point to the middle vertex
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "convergent, initial node"})-[:e {id: "convergent, edge one"}]->(:v {id: "convergent middle node"})<-[:e {id: "convergent, edge two"}]-(:v {id: "convergent, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- Validate Paths work correctly
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "paths, vertex one"})-[:e {id: "paths, edge one"}]->(:v {id: "paths, vertex two"}),
           (:v {id: "paths, vertex three"})-[:e {id: "paths, edge two"}]->(:v {id: "paths, vertex four"})
$$) AS (a agtype);
 a 
---
(0 rows)

--edge with double relationship will throw an error
SELECT * FROM cypher('cypher_create', $$CREATE (:v)<-[:e]->()$$) AS (a agtype);
ERROR:  syntax error at or near ">"
LINE 1: ... FROM cypher('cypher_create', $$CREATE (:v)<-[:e]->()$$) AS ...
                                                             ^
--edge with no relationship will throw an error
SELECT * FROM cypher('cypher_create', $$CREATE (:v)-[:e]-()$$) AS (a agtype);
ERROR:  only directed relationships are allowed in CREATE
LINE 1: ...LECT * FROM cypher('cypher_create', $$CREATE (:v)-[:e]-()$$)...
                                                             ^
--edges without labels are not supported
SELECT * FROM cypher('cypher_create', $$CREATE (:v)-[]->(:v)$$) AS (a agtype);
ERROR:  relationships must be specify a label in CREATE.
LINE 1: ...LECT * FROM cypher('cypher_create', $$CREATE (:v)-[]->(:v)$$...
                                                             ^
SELECT * FROM cypher_create.e;
        id        |    start_id     |     end_id      |           properties           
------------------+-----------------+-----------------+--------------------------------
 1125899906842625 | 844424930131972 | 844424930131973 | {"id": "right rel"}
 1125899906842626 | 844424930131975 | 844424930131974 | {"id": "left rel"}
 1125899906842627 | 844424930131977 | 844424930131978 | {"id": "path, edge two"}
 1125899906842628 | 844424930131976 | 844424930131977 | {"id": "path, edge one"}
 1125899906842629 | 844424930131980 | 844424930131981 | {"id": "divergent, edge two"}
 1125899906842630 | 844424930131980 | 844424930131979 | {"id": "divergent, edge one"}
 1125899906842631 | 844424930131984 | 844424930131983 | {"id": "convergent, edge two"}
 1125899906842632 | 844424930131982 | 844424930131983 | {"id": "convergent, edge one"}
 1125899906842633 | 844424930131985 | 844424930131986 | {"id": "paths, edge one"}
 1125899906842634 | 844424930131987 | 844424930131988 | {"id": "paths, edge two"}
(10 rows)

SELECT * FROM cypher_create.v;
       id        |             properties             
-----------------+------------------------------------
 844424930131969 | {}
 844424930131970 | {}
 844424930131971 | {"key": "value"}
 844424930131972 | {"id": "right rel, initial node"}
 844424930131973 | {"id": "right rel, end node"}
 844424930131974 | {"id": "left rel, initial node"}
 844424930131975 | {"id": "left rel, end node"}
 844424930131976 | {"id": "path, initial node"}
 844424930131977 | {"id": "path, middle node"}
 844424930131978 | {"id": "path, last node"}
 844424930131979 | {"id": "divergent, initial node"}
 844424930131980 | {"id": "divergent middle node"}
 844424930131981 | {"id": "divergent, end node"}
 844424930131982 | {"id": "convergent, initial node"}
 844424930131983 | {"id": "convergent middle node"}
 844424930131984 | {"id": "convergent, end node"}
 844424930131985 | {"id": "paths, vertex one"}
 844424930131986 | {"id": "paths, vertex two"}
 844424930131987 | {"id": "paths, vertex three"}
 844424930131988 | {"id": "paths, vertex four"}
(20 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (:n_var {name: 'Node A'})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (:n_var {name: 'Node B'})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (:n_var {name: 'Node C'})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var), (b:n_var)
	WHERE a.name <> b.name
	CREATE (a)-[:e_var {name: a.name + ' -> ' + b.name}]->(b)
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE (a)-[:e_var {name: a.name + ' -> ' + a.name}]->(a)
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE (a)-[:e_var {name: a.name + ' -> new node'}]->(:n_other_node)
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node Z'
	CREATE (a)-[:e_var {name: a.name + ' -> doesn''t exist'}]->(:n_other_node)
$$) as (a agtype);
ERROR:  syntax error at or near "'t exist'"
LINE 4:  CREATE (a)-[:e_var {name: a.name + ' -> doesn''t exist'}]->...
                                                       ^
SELECT * FROM cypher_create.n_var;
        id        |     properties     
------------------+--------------------
 1407374883553281 | {"name": "Node A"}
 1407374883553282 | {"name": "Node B"}
 1407374883553283 | {"name": "Node C"}
(3 rows)

SELECT * FROM cypher_create.e_var;
        id        |     start_id     |      end_id      |           properties           
------------------+------------------+------------------+--------------------------------
 1688849860263937 | 1407374883553281 | 1407374883553282 | {"name": "Node A -> Node B"}
 1688849860263938 | 1407374883553281 | 1407374883553283 | {"name": "Node A -> Node C"}
 1688849860263939 | 1407374883553282 | 1407374883553281 | {"name": "Node B -> Node A"}
 1688849860263940 | 1407374883553282 | 1407374883553283 | {"name": "Node B -> Node C"}
 1688849860263941 | 1407374883553283 | 1407374883553281 | {"name": "Node C -> Node A"}
 1688849860263942 | 1407374883553283 | 1407374883553282 | {"name": "Node C -> Node B"}
 1688849860263943 | 1407374883553281 | 1407374883553281 | {"name": "Node A -> Node A"}
 1688849860263944 | 1407374883553282 | 1407374883553282 | {"name": "Node B -> Node B"}
 1688849860263945 | 1407374883553283 | 1407374883553283 | {"name": "Node C -> Node C"}
 1688849860263946 | 1407374883553281 | 1970324836974593 | {"name": "Node A -> new node"}
 1688849860263947 | 1407374883553282 | 1970324836974594 | {"name": "Node B -> new node"}
 1688849860263948 | 1407374883553283 | 1970324836974595 | {"name": "Node C -> new node"}
(12 rows)

--Check every label has been created
SELECT * FROM ag_label;
       name       | graph | id | kind |            relation            
------------------+-------+----+------+--------------------------------
 _ag_label_vertex | 17003 |  1 | v    | cypher_create._ag_label_vertex
 _ag_label_edge   | 17003 |  2 | e    | cypher_create._ag_label_edge
 v                | 17003 |  3 | v    | cypher_create.v
 e                | 17003 |  4 | e    | cypher_create.e
 n_var            | 17003 |  5 | v    | cypher_create.n_var
 e_var            | 17003 |  6 | e    | cypher_create.e_var
 n_other_node     | 17003 |  7 | v    | cypher_create.n_other_node
(7 rows)

--Validate every vertex has the correct label
SELECT * FROM cypher('cypher_create', $$MATCH (n) RETURN n$$) AS (n agtype);
                                                n                                                
-------------------------------------------------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {}}::vertex
 {"id": 844424930131969, "label": "v", "properties": {}}::vertex
 {"id": 844424930131970, "label": "v", "properties": {}}::vertex
 {"id": 844424930131971, "label": "v", "properties": {"key": "value"}}::vertex
 {"id": 844424930131972, "label": "v", "properties": {"id": "right rel, initial node"}}::vertex
 {"id": 844424930131973, "label": "v", "properties": {"id": "right rel, end node"}}::vertex
 {"id": 844424930131974, "label": "v", "properties": {"id": "left rel, initial node"}}::vertex
 {"id": 844424930131975, "label": "v", "properties": {"id": "left rel, end node"}}::vertex
 {"id": 844424930131976, "label": "v", "properties": {"id": "path, initial node"}}::vertex
 {"id": 844424930131977, "label": "v", "properties": {"id": "path, middle node"}}::vertex
 {"id": 844424930131978, "label": "v", "properties": {"id": "path, last node"}}::vertex
 {"id": 844424930131979, "label": "v", "properties": {"id": "divergent, initial node"}}::vertex
 {"id": 844424930131980, "label": "v", "properties": {"id": "divergent middle node"}}::vertex
 {"id": 844424930131981, "label": "v", "properties": {"id": "divergent, end node"}}::vertex
 {"id": 844424930131982, "label": "v", "properties": {"id": "convergent, initial node"}}::vertex
 {"id": 844424930131983, "label": "v", "properties": {"id": "convergent middle node"}}::vertex
 {"id": 844424930131984, "label": "v", "properties": {"id": "convergent, end node"}}::vertex
 {"id": 844424930131985, "label": "v", "properties": {"id": "paths, vertex one"}}::vertex
 {"id": 844424930131986, "label": "v", "properties": {"id": "paths, vertex two"}}::vertex
 {"id": 844424930131987, "label": "v", "properties": {"id": "paths, vertex three"}}::vertex
 {"id": 844424930131988, "label": "v", "properties": {"id": "paths, vertex four"}}::vertex
 {"id": 1407374883553281, "label": "n_var", "properties": {"name": "Node A"}}::vertex
 {"id": 1407374883553282, "label": "n_var", "properties": {"name": "Node B"}}::vertex
 {"id": 1407374883553283, "label": "n_var", "properties": {"name": "Node C"}}::vertex
 {"id": 1970324836974593, "label": "n_other_node", "properties": {}}::vertex
 {"id": 1970324836974594, "label": "n_other_node", "properties": {}}::vertex
 {"id": 1970324836974595, "label": "n_other_node", "properties": {}}::vertex
(27 rows)

--
-- Errors
--
-- Var 'a' cannot have properties in the create clause
SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node A'
	CREATE (a {test:1})-[:e_var]->()
$$) as (a agtype);
ERROR:  previously declared nodes in a create clause cannot have properties
LINE 1: SELECT * FROM cypher('cypher_create', $$
                                               ^
-- Var 'a' cannot change labels
SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node A'
	CREATE (a:new_label)-[:e_var]->()
$$) as (a agtype);
ERROR:  previously declared variables cannot have a label
LINE 1: SELECT * FROM cypher('cypher_create', $$
                                               ^
SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node A'
	CREATE (a)-[b:e_var]->()
$$) as (a agtype);
ERROR:  edge cannot be declared as a variable in CREATE clause
LINE 1: SELECT * FROM cypher('cypher_create', $$
                                               ^
-- column definition list for CREATE clause must contain a single agtype
-- attribute
SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a int);
ERROR:  column definition list for CREATE clause must contain a single agtype attribute
LINE 1: SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a i...
                      ^
HINT:  ... cypher($$ ... CREATE ... $$) AS t(c agtype) ...
SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a agtype, b int);
ERROR:  column definition list for CREATE clause must contain a single agtype attribute
LINE 1: SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a a...
                      ^
HINT:  ... cypher($$ ... CREATE ... $$) AS t(c agtype) ...
-- intial and last vertex point to the middle vertex
SELECT drop_graph('cypher_create', true);
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to table cypher_create._ag_label_vertex
drop cascades to table cypher_create._ag_label_edge
drop cascades to table cypher_create.v
drop cascades to table cypher_create.e
drop cascades to table cypher_create.n_var
drop cascades to table cypher_create.e_var
drop cascades to table cypher_create.n_other_node
NOTICE:  graph "cypher_create" has been dropped
 drop_graph 
------------
 
(1 row)

